$scriptName = $MyInvocation.MyCommand.Name

pdflatex .\example.tex

# You can get image magick using winget install ImageMagick.ImageMagick and then restarting your computer.
# Ensure that ghostscript is installed as well.
magick -density 150 .\example.pdf -quality 90 -background white -alpha remove -strip .\examples\exampleoutput.png

$readmefile = ".\README.md"

(
@"
# yotocard.sty

## Prerequisites
You need to have [LaTeX installed](https://www.latex-project.org/get/). If you don't, it's game-over.


## Example code
In a latex document, include the package ``yotocard`` and then make cards using the command ``\yotocard{path-to-card}``.
You can create numbered cards using ``yotocardwithnumber{path-to-card}{number}``.
You can create blank spaces that are the size of a card using ``\emptycardspace``.

``````latex
% example.tex
"@
) | Set-Content -Path $readmefile

Get-Content .\example.tex |  Add-Content -Path $readmefile

(
@"
``````

You should be able to create the example file by running:
```
pdflatex example.tex
```
and you should end up with something that looks like this:

![the output](examples/exampleoutput.png)


## Recommended use case
This is what I do, but you should do what you feel :-)
 - print the pdfs onto a sheet of self-adhesive vinyl inkjet paper;
 - to protect the printed surface, stick a second layer of the vinyl paper over the printed layer
 - cut the cards out
 - stick them to a make your own yoto card (one side of the card is completely white)


## Future work and bugs
- Add title/ subtitle/ image overlay support
- Add support for fixing to card width instead of height

Questions, suggestions and bug reports can be logged at https://github.com/ajasmith/yotocards where you can also find the latest version.


_This file is auto-generated by ``$scriptName``. Do not edit it directly._
"@
) | Add-Content -Path $readmefile

Remove-Item *.aux
Remove-Item *.log
Remove-Item *.out
Remove-Item example.pdf